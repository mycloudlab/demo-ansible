- name: Ansible test
  hosts: localhost
  connection: local 
  tasks:
  - name: criar vpc para aplicação pet-clinic
    amazon.aws.ec2_vpc_net:
      name: vpc-petclinic-dev
      cidr_block: 10.10.0.0/16
      region: us-east-2
      tags:
        Name: vpc-petclinic-dev
        env: dev
    register: vpcdata


  - name: cria o gateway de internet para aplicação pet-clinic
    amazon.aws.ec2_vpc_igw:
      vpc_id: "{{vpcdata.vpc.id}}"
      region: us-east-2
      state: present
      tags:
        Name: igw-pet-clinic-dev
        env: dev
    register: igwdata



  - name: cria a sub rede para aplicação pet-clinic
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{vpcdata.vpc.id}}"
      region: us-east-2
      cidr: 10.10.0.0/16
      map_public: yes
      tags:
        Name: subnet-pet-clinic-dev
        env: dev
    register: subnetdata


  - name: cria vpc public subnet route table
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpcdata.vpc.id }}"
      region: us-east-2
      state: present
      tags:
        Name: rtb-petclinic-dev
      subnets: [ "{{ subnetdata.subnet.id }}" ]
      # create routes
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ igwdata.gateway_id }}"
    register: prtdata

  - name: ec2 security group
    amazon.aws.ec2_group:
      name: sec_group_petclinic
      description: an example EC2 group
      vpc_id: "{{vpcdata.vpc.id}}"
      region: us-east-2
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0

  - name: create a new ec2 key pair, returns generated private key
    amazon.aws.ec2_key:
      name: pet_clinic_key
      region: us-east-2
      key_material: "{{ lookup('file', 'pet-clinic-dev.pub') }}"
    
  - name: criar vms para balanceamento
    amazon.aws.ec2_instance:
      key_name: pet_clinic_key
      instance_type: t2.micro
      image_id: ami-0abcb3d13703a4978
      region: us-east-2
      wait: yes
      security_group: sec_group_petclinic
      exact_count: 1
      vpc_subnet_id: "{{ subnetdata.subnet.id }}"
      tags:
        Name: pet-clinic-lb-dev
        role: balancer
        env: dev
      
  - name: criar vms para app
    amazon.aws.ec2_instance:
      key_name: pet_clinic_key
      instance_type: t2.micro
      image_id: ami-0abcb3d13703a4978
      region: us-east-2
      wait: yes
      security_group: sec_group_petclinic
      exact_count: 2
      vpc_subnet_id: "{{ subnetdata.subnet.id }}"
      tags:
        Name: pet-clinic-app-dev
        role: app
        env: dev

  - name: criar vms para db
    amazon.aws.ec2_instance:
      key_name: pet_clinic_key
      instance_type: t2.micro
      image_id: ami-0abcb3d13703a4978
      region: us-east-2
      wait: yes
      security_group: sec_group_petclinic
      exact_count: 1
      vpc_subnet_id: "{{ subnetdata.subnet.id }}"
      tags:
        Name: pet-clinic-db-dev
        role: database
        env: dev





- name: ansible haproxy balancer
  hosts: tag_Name_pet_clinic_lb_dev
  vars:
    ansible_ssh_private_key_file: "{{playbook_dir}}/pet-clinic-dev"
  tasks:
  - name: configura balanceamento
    shell: touch /tmp/lb

#- name: ansible db
#  hosts: tag_Name_pet_clinic_db_dev
#  tasks:
#  - name: configura db
#    shell: touch /tmp/db

#- name: ansible app
##  hosts: tag_Name_pet_clinic_app_dev
#  tasks:
#  - name: configura app
#    shell: touch /tmp/app